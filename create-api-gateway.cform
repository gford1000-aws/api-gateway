{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Creates an API Gateway that returns the current time, with X-Ray enabled and optional Custom Authoriser ",
    "Parameters" : {
        "APIName" : {
            "Default" : "GetTime",
            "Description" : "The name of the API",
            "Type" : "String"
        },
        "APIDescription" : {
            "Default" : "Returns current time from a GET request",
            "Description" : "Description of the API",
            "Type" : "String"
        },
        "POSTResourceName" : {
            "Default" : "sendtime",
            "Description" : "The path of the resource (i.e. https://<domain>/<stage>/[resource]) when submitting a time",
            "Type" : "String"
        },
        "StageName" : {
            "Default" : "v1",
            "Description" : "The name for the API stage",
            "Type" : "String"
        },
        "AuthorisationTokenHeaderName" : {
            "Default" : "AuthDetails",
            "Description" : "The name of the header containing the authorisation token",
            "Type" : "String"
        },
        "AuthorisationTimeout" : {
            "Default" : "10",
            "Description" : "The TTL in seconds for authorisation of a token.  Set to 0 for no authorisation caching",
            "Type" : "Number",
            "MinValue" : 0,
            "MaxValue" : 3600
        }
	},
    "Conditions" : {
        "NoAuthorisation" : { "Fn::Equals" : [ { "Ref" : "AuthorisationTokenHeaderName" }, "" ] },
        "UseAuthorisation" : { "Fn::Not" : [ { "Condition" : "NoAuthorisation" } ] }
    },
	"Resources" : {
        "RestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": { "Ref" : "APIName" },
                "Description" : { "Ref" : "APIDescription" }
            }
        },    
        "ApiPOSTResourceName": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": { "Ref" : "RestApi" },
                "ParentId": { "Fn::GetAtt" : [ "RestApi", "RootResourceId" ] },
                "PathPart": { "Ref" : "POSTResourceName" }
            }
        },
        "APIPOSTResourceMethod": {
            "Condition" : "UseAuthorisation",
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": [ "POSTLambda" ],
            "Properties": {
                "AuthorizationType" : "CUSTOM",
                "AuthorizerId" : { "Ref" : "Authoriser" },
                "HttpMethod" : "POST",
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": { 
                        "Fn::Join" : [ "", 
                            [
                                "arn:aws:apigateway:", 
                                { "Ref" : "AWS::Region" }, 
                                ":lambda:path/2015-03-31/functions/", 
                                { "Fn::GetAtt" : [ "POSTLambda", "Arn" ] }, 
                                "/invocations"
                            ]
                        ] 
                    }
                },
                "ResourceId" : { "Ref" : "ApiPOSTResourceName" },
                "RestApiId" : { "Ref" : "RestApi" }
            }
        },
        "RestApiStage": {
            "Condition" : "UseAuthorisation",
            "Type": "AWS::ApiGateway::Stage",
            "DependsOn": [ "APIPOSTResourceMethod" ],
            "Properties": {
                "DeploymentId": { "Ref" : "RestApiDeployment" },
                "RestApiId": { "Ref" : "RestApi" },
                "StageName": { "Ref" : "StageName" },
                "TracingEnabled": true
            }
        },    
        "RestApiDeployment": {
            "Condition" : "UseAuthorisation",
            "Type": "AWS::ApiGateway::Deployment",
            "DependsOn": [ "APIPOSTResourceMethod" ],
            "Properties": {
                "RestApiId": { "Ref" : "RestApi" }
            }
        },    
        "APIPOSTResourceMethodNoAuth": {
            "Condition" : "NoAuthorisation",
            "Type": "AWS::ApiGateway::Method",
            "DependsOn": [ "POSTLambda" ],
            "Properties": {
                "AuthorizationType" : "NONE",
                "HttpMethod" : "POST",
                "Integration": {
                    "Type": "AWS_PROXY",
                    "IntegrationHttpMethod": "POST",
                    "Uri": { 
                        "Fn::Join" : [ "", 
                            [
                                "arn:aws:apigateway:", 
                                { "Ref" : "AWS::Region" }, 
                                ":lambda:path/2015-03-31/functions/", 
                                { "Fn::GetAtt" : [ "POSTLambda", "Arn" ] }, 
                                "/invocations"
                            ]
                        ] 
                    }
                },
                "ResourceId" : { "Ref" : "ApiPOSTResourceName" },
                "RestApiId" : { "Ref" : "RestApi" }
            }
        },
        "RestApiStageNoAuth": {
            "Condition" : "NoAuthorisation",
            "Type": "AWS::ApiGateway::Stage",
            "DependsOn": [ "APIPOSTResourceMethodNoAuth" ],
            "Properties": {
                "DeploymentId": { "Ref" : "RestApiDeploymentNoAuth" },
                "RestApiId": { "Ref" : "RestApi" },
                "StageName": { "Ref" : "StageName" },
                "TracingEnabled": true
            }
        },
        "RestApiDeploymentNoAuth": {
            "Condition" : "NoAuthorisation",
            "Type": "AWS::ApiGateway::Deployment",
            "DependsOn": [ "APIPOSTResourceMethodNoAuth" ],
            "Properties": {
                "RestApiId": { "Ref" : "RestApi" }
            }
        },    
        "Authoriser" : {
            "Condition" : "UseAuthorisation",
            "Type" : "AWS::ApiGateway::Authorizer",
            "Properties" : {
                "AuthorizerCredentials" : { "Fn::GetAtt" : [ "AuthoriserRole", "Arn" ] },
                "AuthorizerResultTtlInSeconds" : { "Ref" : "AuthorisationTimeout" },
                "AuthorizerUri" : { 
                    "Fn::Join" : [ "", 
                        [
                            "arn:aws:apigateway:", 
                            { "Ref" : "AWS::Region" }, 
                            ":lambda:path/2015-03-31/functions/", 
                            { "Fn::GetAtt" : [ "LambdaAuthoriser", "Arn" ] }, 
                            "/invocations"
                        ]
                    ] 
                },
                "IdentitySource" : { "Fn::Sub": [ "method.request.header.${HeaderName}", { "HeaderName": { "Ref" : "AuthorisationTokenHeaderName" } } ] },
                "Name" : { "Fn::Sub" : [ "${RestAPI}-${Resource}", { "RestAPI" : { "Ref" : "RestApi" }, "Resource" : { "Ref" : "POSTResourceName" } } ] },
                "RestApiId" : { "Ref" : "RestApi" },
                "Type" : "TOKEN"
            }
        },
        "AuthoriserRole": {
            "Condition" : "UseAuthorisation",
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "apigateway.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action" : [ "lambda:InvokeFunction" ],
                                    "Effect" : "Allow",
                                    "Resource" : { "Fn::GetAtt" : [ "LambdaAuthoriser", "Arn" ] }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "LambdaAuthoriser": {
            "Condition" : "UseAuthorisation",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "from uuid import uuid4",
                                "",
                                "def generate_policy(principal_id, effect, resource):",
                                "    response = {}",
                                "    ",
                                "    response[\"principalId\"] = principal_id",
                                "    if effect and resource:",
                                "        policy = { ",
                                "            \"Version\" : \"2012-10-17\",",
                                "            \"Statement\" : [",
                                "                {",
                                "                    \"Action\" : \"execute-api:Invoke\",",
                                "                    \"Effect\" : effect,",
                                "                    \"Resource\" : resource",
                                "                }",
                                "            ]",
                                "        }",
                                "        response[\"policyDocument\"] = policy",
                                "",
                                "    # Can optionally return a context object of your choosing.",
                                "    response[\"context\"] = {",
                                "        \"aKey\" : \"Hello\",",
                                "        \"bKey\" : 123",
                                "    }",
                                "    return response",
                                "",
                                "def validate_token(token):",
                                "    # Comprehensive validation should be performed here",
                                "    # based on a user_id embedded/derived from the token",
                                "",
                                "    # Here we simply create unique ids for each call",
                                "    user_id = str(uuid4())",
                                "",
                                "    val = token.lower()",
                                "    if val in [ \"allow\", \"deny\" ]:",
                                "        m = { \"allow\" : \"Allow\", \"deny\": \"Deny\" }",
                                "        return (user_id, m[val])",
                                "    return (user_id, \"Deny\")",
                                "",
                                "def process(event):",
                                "    token = event.get(\"authorizationToken\", \"\")",
                                "    (user_id, status) = validate_token(token)",
                                "    return generate_policy(user_id, status, event[\"methodArn\"])",
                                "",
                                "def lambda_handler(event, context):",
                                "    return process(event)",
                                ""
                            ]
                        ]
                    }
                },
                "Description": "Custom authorising Lambda for this API",
                "Handler": "index.lambda_handler",
                "MemorySize": 128,
                "Role": { "Fn::GetAtt": [ "LambdaRole", "Arn" ] },
                "Runtime": "python2.7",
                "Timeout": 5,
                "TracingConfig" : {
                    "Mode" : "Active"
                }
            },
            "Type": "AWS::Lambda::Function"
        },
        "GETLambda" : {
            "Type": "AWS::Lambda::Function",
            "Properties" : {
                "Code" : {
                    "ZipFile" : {
                        "Fn::Join": [
                            "\n",
                            [
                                "from json import dumps",
                                "from datetime import datetime",
                                "",
                                "def do_something(event):",
                                "    # Processing goes here, returning status code of processing as well as result",
                                "    # Here just return the current time, to show the Lambda is being called",
                                "    print(event)",
                                "    return (200, datetime.now().isoformat('T'))",
                                "",
                                "def lambda_handler(event, context):",
                                "    # Wrapper code to catch unexpected errors",
                                "    try:",
                                "       response = do_something(event)",
                                "       return { \"statusCode\" : response[0], \"headers\" : {}, \"body\": dumps(response[1]) }",
                                "    except Exception as e:",
                                "       return { \"statusCode\" : 500, \"headers\" : {}, \"body\": \"Internal error: {}\".format(e) }",
                                ""
                            ]
                        ]
                    }
                },
                "Description" : "Lambda returning the current date/time",
                "Handler" : "index.lambda_handler",
                "MemorySize" : 128,
                "Role" : { "Fn::GetAtt": [ "LambdaRole", "Arn" ] },
                "Runtime" : "python2.7",
                "Timeout" : 5,
                "TracingConfig" : {
                    "Mode" : "Active"
                }
            }
        },
        "POSTLambda" : {
            "Type": "AWS::Lambda::Function",
            "Properties" : {
                "Code" : {
                    "ZipFile" : {
                        "Fn::Join": [
                            "\n",
                            [
                                "from json import dumps, loads",
                                "from datetime import datetime",
                                "",
                                "def do_something(event):",
                                "    # Processing goes here, returning status code of processing as well as result",
                                "    # Here just return the value of supplied body attribute 'dt', if provided.",
                                "    print(event)",
                                "",
                                "    b = event.get('body', None)",
                                "    if b != None and isinstance(b, (str, unicode)):",
                                "       body = loads(b)",
                                "       if isinstance(body, dict):",
                                "          return (200, body.get('dt', 'Not found'))",
                                "    return (200, 'Not found')",
                                "",
                                "def lambda_handler(event, context):",
                                "    # Wrapper code to catch unexpected errors",
                                "    try:",
                                "       response = do_something(event)",
                                "       return { \"statusCode\" : response[0], \"headers\" : {}, \"body\": dumps(response[1]) }",
                                "    except Exception as e:",
                                "       return { \"statusCode\" : 500, \"headers\" : {}, \"body\": \"Internal error: {}\".format(e) }",
                                ""
                            ]
                        ]
                    }
                },
                "Description" : "Lambda returning the current date/time",
                "Handler" : "index.lambda_handler",
                "MemorySize" : 128,
                "Role" : { "Fn::GetAtt": [ "LambdaRole", "Arn" ] },
                "Runtime" : "python2.7",
                "Timeout" : 5,
                "TracingConfig" : {
                    "Mode" : "Active"
                }
            }
        },
        "LambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "LoggingLambdaActivity",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*",
                                    "Effect": "Allow"
                                }
                            ]
                        }
                    },
                    {
                        "PolicyName": "X-RayTracing",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Action": [
                                        "xray:PutTraceSegments",
                                        "xray:PutTelemetryRecords"
                                    ],
                                    "Resource": "*",
                                    "Effect": "Allow"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "APILambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": { "Ref" : "POSTLambda" },
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                    "Fn::Join": [ "",
                        [
                            "arn:aws:execute-api:",
                            { "Ref" : "AWS::Region" },
                            ":",
                            { "Ref" : "AWS::AccountId" },
                            ":",
                            { "Ref" : "RestApi" },
                            "/*/*"
                        ]
                    ]
                }
            }
        }    
    },
    "Outputs" : {
        "URL" : {
            "Description" : "The URL to the deployed stage",
            "Value" : {
                "Fn::Join" : [ "",
                    [
                        "https://",
                        { "Ref" : "RestApi" },
                        ".execute-api.",
                        { "Ref" : "AWS::Region" },
                        ".amazonaws.com/", 
                        { "Ref" : "StageName" }
                    ]
                ]
            }
        }
    }
}